// Code generated by MockGen. DO NOT EDIT.
// Source: router_grpc.pb.go

// Package mock_routerrpc is a generated GoMock package.
package mock_rpc

import (
	context "context"
	reflect "reflect"

	routerrpc "github.com/lightningnetwork/lnd/lnrpc/routerrpc"
	gomock "github.com/golang/mock/gomock"
	lnrpc "github.com/lightningnetwork/lnd/lnrpc"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockRouterClient is a mock of RouterClient interface.
type MockRouterClient struct {
	ctrl     *gomock.Controller
	recorder *MockRouterClientMockRecorder
}

// MockRouterClientMockRecorder is the mock recorder for MockRouterClient.
type MockRouterClientMockRecorder struct {
	mock *MockRouterClient
}

// NewMockRouterClient creates a new mock instance.
func NewMockRouterClient(ctrl *gomock.Controller) *MockRouterClient {
	mock := &MockRouterClient{ctrl: ctrl}
	mock.recorder = &MockRouterClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouterClient) EXPECT() *MockRouterClientMockRecorder {
	return m.recorder
}

// BuildRoute mocks base method.
func (m *MockRouterClient) BuildRoute(ctx context.Context, in *routerrpc.BuildRouteRequest, opts ...grpc.CallOption) (*routerrpc.BuildRouteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BuildRoute", varargs...)
	ret0, _ := ret[0].(*routerrpc.BuildRouteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildRoute indicates an expected call of BuildRoute.
func (mr *MockRouterClientMockRecorder) BuildRoute(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildRoute", reflect.TypeOf((*MockRouterClient)(nil).BuildRoute), varargs...)
}

// EstimateRouteFee mocks base method.
func (m *MockRouterClient) EstimateRouteFee(ctx context.Context, in *routerrpc.RouteFeeRequest, opts ...grpc.CallOption) (*routerrpc.RouteFeeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EstimateRouteFee", varargs...)
	ret0, _ := ret[0].(*routerrpc.RouteFeeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EstimateRouteFee indicates an expected call of EstimateRouteFee.
func (mr *MockRouterClientMockRecorder) EstimateRouteFee(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimateRouteFee", reflect.TypeOf((*MockRouterClient)(nil).EstimateRouteFee), varargs...)
}

// GetMissionControlConfig mocks base method.
func (m *MockRouterClient) GetMissionControlConfig(ctx context.Context, in *routerrpc.GetMissionControlConfigRequest, opts ...grpc.CallOption) (*routerrpc.GetMissionControlConfigResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMissionControlConfig", varargs...)
	ret0, _ := ret[0].(*routerrpc.GetMissionControlConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMissionControlConfig indicates an expected call of GetMissionControlConfig.
func (mr *MockRouterClientMockRecorder) GetMissionControlConfig(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMissionControlConfig", reflect.TypeOf((*MockRouterClient)(nil).GetMissionControlConfig), varargs...)
}

// HtlcInterceptor mocks base method.
func (m *MockRouterClient) HtlcInterceptor(ctx context.Context, opts ...grpc.CallOption) (routerrpc.Router_HtlcInterceptorClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HtlcInterceptor", varargs...)
	ret0, _ := ret[0].(routerrpc.Router_HtlcInterceptorClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HtlcInterceptor indicates an expected call of HtlcInterceptor.
func (mr *MockRouterClientMockRecorder) HtlcInterceptor(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HtlcInterceptor", reflect.TypeOf((*MockRouterClient)(nil).HtlcInterceptor), varargs...)
}

// QueryMissionControl mocks base method.
func (m *MockRouterClient) QueryMissionControl(ctx context.Context, in *routerrpc.QueryMissionControlRequest, opts ...grpc.CallOption) (*routerrpc.QueryMissionControlResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryMissionControl", varargs...)
	ret0, _ := ret[0].(*routerrpc.QueryMissionControlResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryMissionControl indicates an expected call of QueryMissionControl.
func (mr *MockRouterClientMockRecorder) QueryMissionControl(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryMissionControl", reflect.TypeOf((*MockRouterClient)(nil).QueryMissionControl), varargs...)
}

// QueryProbability mocks base method.
func (m *MockRouterClient) QueryProbability(ctx context.Context, in *routerrpc.QueryProbabilityRequest, opts ...grpc.CallOption) (*routerrpc.QueryProbabilityResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryProbability", varargs...)
	ret0, _ := ret[0].(*routerrpc.QueryProbabilityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryProbability indicates an expected call of QueryProbability.
func (mr *MockRouterClientMockRecorder) QueryProbability(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryProbability", reflect.TypeOf((*MockRouterClient)(nil).QueryProbability), varargs...)
}

// ResetMissionControl mocks base method.
func (m *MockRouterClient) ResetMissionControl(ctx context.Context, in *routerrpc.ResetMissionControlRequest, opts ...grpc.CallOption) (*routerrpc.ResetMissionControlResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResetMissionControl", varargs...)
	ret0, _ := ret[0].(*routerrpc.ResetMissionControlResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetMissionControl indicates an expected call of ResetMissionControl.
func (mr *MockRouterClientMockRecorder) ResetMissionControl(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetMissionControl", reflect.TypeOf((*MockRouterClient)(nil).ResetMissionControl), varargs...)
}

// SendPayment mocks base method.
func (m *MockRouterClient) SendPayment(ctx context.Context, in *routerrpc.SendPaymentRequest, opts ...grpc.CallOption) (routerrpc.Router_SendPaymentClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendPayment", varargs...)
	ret0, _ := ret[0].(routerrpc.Router_SendPaymentClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendPayment indicates an expected call of SendPayment.
func (mr *MockRouterClientMockRecorder) SendPayment(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPayment", reflect.TypeOf((*MockRouterClient)(nil).SendPayment), varargs...)
}

// SendPaymentV2 mocks base method.
func (m *MockRouterClient) SendPaymentV2(ctx context.Context, in *routerrpc.SendPaymentRequest, opts ...grpc.CallOption) (routerrpc.Router_SendPaymentV2Client, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendPaymentV2", varargs...)
	ret0, _ := ret[0].(routerrpc.Router_SendPaymentV2Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendPaymentV2 indicates an expected call of SendPaymentV2.
func (mr *MockRouterClientMockRecorder) SendPaymentV2(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPaymentV2", reflect.TypeOf((*MockRouterClient)(nil).SendPaymentV2), varargs...)
}

// SendToRoute mocks base method.
func (m *MockRouterClient) SendToRoute(ctx context.Context, in *routerrpc.SendToRouteRequest, opts ...grpc.CallOption) (*routerrpc.SendToRouteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendToRoute", varargs...)
	ret0, _ := ret[0].(*routerrpc.SendToRouteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendToRoute indicates an expected call of SendToRoute.
func (mr *MockRouterClientMockRecorder) SendToRoute(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendToRoute", reflect.TypeOf((*MockRouterClient)(nil).SendToRoute), varargs...)
}

// SendToRouteV2 mocks base method.
func (m *MockRouterClient) SendToRouteV2(ctx context.Context, in *routerrpc.SendToRouteRequest, opts ...grpc.CallOption) (*lnrpc.HTLCAttempt, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendToRouteV2", varargs...)
	ret0, _ := ret[0].(*lnrpc.HTLCAttempt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendToRouteV2 indicates an expected call of SendToRouteV2.
func (mr *MockRouterClientMockRecorder) SendToRouteV2(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendToRouteV2", reflect.TypeOf((*MockRouterClient)(nil).SendToRouteV2), varargs...)
}

// SetMissionControlConfig mocks base method.
func (m *MockRouterClient) SetMissionControlConfig(ctx context.Context, in *routerrpc.SetMissionControlConfigRequest, opts ...grpc.CallOption) (*routerrpc.SetMissionControlConfigResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetMissionControlConfig", varargs...)
	ret0, _ := ret[0].(*routerrpc.SetMissionControlConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetMissionControlConfig indicates an expected call of SetMissionControlConfig.
func (mr *MockRouterClientMockRecorder) SetMissionControlConfig(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMissionControlConfig", reflect.TypeOf((*MockRouterClient)(nil).SetMissionControlConfig), varargs...)
}

// SubscribeHtlcEvents mocks base method.
func (m *MockRouterClient) SubscribeHtlcEvents(ctx context.Context, in *routerrpc.SubscribeHtlcEventsRequest, opts ...grpc.CallOption) (routerrpc.Router_SubscribeHtlcEventsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SubscribeHtlcEvents", varargs...)
	ret0, _ := ret[0].(routerrpc.Router_SubscribeHtlcEventsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeHtlcEvents indicates an expected call of SubscribeHtlcEvents.
func (mr *MockRouterClientMockRecorder) SubscribeHtlcEvents(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeHtlcEvents", reflect.TypeOf((*MockRouterClient)(nil).SubscribeHtlcEvents), varargs...)
}

// TrackPayment mocks base method.
func (m *MockRouterClient) TrackPayment(ctx context.Context, in *routerrpc.TrackPaymentRequest, opts ...grpc.CallOption) (routerrpc.Router_TrackPaymentClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TrackPayment", varargs...)
	ret0, _ := ret[0].(routerrpc.Router_TrackPaymentClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrackPayment indicates an expected call of TrackPayment.
func (mr *MockRouterClientMockRecorder) TrackPayment(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrackPayment", reflect.TypeOf((*MockRouterClient)(nil).TrackPayment), varargs...)
}

// TrackPaymentV2 mocks base method.
func (m *MockRouterClient) TrackPaymentV2(ctx context.Context, in *routerrpc.TrackPaymentRequest, opts ...grpc.CallOption) (routerrpc.Router_TrackPaymentV2Client, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TrackPaymentV2", varargs...)
	ret0, _ := ret[0].(routerrpc.Router_TrackPaymentV2Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrackPaymentV2 indicates an expected call of TrackPaymentV2.
func (mr *MockRouterClientMockRecorder) TrackPaymentV2(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrackPaymentV2", reflect.TypeOf((*MockRouterClient)(nil).TrackPaymentV2), varargs...)
}

// UpdateChanStatus mocks base method.
func (m *MockRouterClient) UpdateChanStatus(ctx context.Context, in *routerrpc.UpdateChanStatusRequest, opts ...grpc.CallOption) (*routerrpc.UpdateChanStatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateChanStatus", varargs...)
	ret0, _ := ret[0].(*routerrpc.UpdateChanStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateChanStatus indicates an expected call of UpdateChanStatus.
func (mr *MockRouterClientMockRecorder) UpdateChanStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChanStatus", reflect.TypeOf((*MockRouterClient)(nil).UpdateChanStatus), varargs...)
}

// XImportMissionControl mocks base method.
func (m *MockRouterClient) XImportMissionControl(ctx context.Context, in *routerrpc.XImportMissionControlRequest, opts ...grpc.CallOption) (*routerrpc.XImportMissionControlResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "XImportMissionControl", varargs...)
	ret0, _ := ret[0].(*routerrpc.XImportMissionControlResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// XImportMissionControl indicates an expected call of XImportMissionControl.
func (mr *MockRouterClientMockRecorder) XImportMissionControl(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XImportMissionControl", reflect.TypeOf((*MockRouterClient)(nil).XImportMissionControl), varargs...)
}

// MockRouter_SendPaymentV2Client is a mock of Router_SendPaymentV2Client interface.
type MockRouter_SendPaymentV2Client struct {
	ctrl     *gomock.Controller
	recorder *MockRouter_SendPaymentV2ClientMockRecorder
}

// MockRouter_SendPaymentV2ClientMockRecorder is the mock recorder for MockRouter_SendPaymentV2Client.
type MockRouter_SendPaymentV2ClientMockRecorder struct {
	mock *MockRouter_SendPaymentV2Client
}

// NewMockRouter_SendPaymentV2Client creates a new mock instance.
func NewMockRouter_SendPaymentV2Client(ctrl *gomock.Controller) *MockRouter_SendPaymentV2Client {
	mock := &MockRouter_SendPaymentV2Client{ctrl: ctrl}
	mock.recorder = &MockRouter_SendPaymentV2ClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouter_SendPaymentV2Client) EXPECT() *MockRouter_SendPaymentV2ClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockRouter_SendPaymentV2Client) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockRouter_SendPaymentV2ClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockRouter_SendPaymentV2Client)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockRouter_SendPaymentV2Client) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockRouter_SendPaymentV2ClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockRouter_SendPaymentV2Client)(nil).Context))
}

// Header mocks base method.
func (m *MockRouter_SendPaymentV2Client) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockRouter_SendPaymentV2ClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockRouter_SendPaymentV2Client)(nil).Header))
}

// Recv mocks base method.
func (m *MockRouter_SendPaymentV2Client) Recv() (*lnrpc.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*lnrpc.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockRouter_SendPaymentV2ClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockRouter_SendPaymentV2Client)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockRouter_SendPaymentV2Client) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockRouter_SendPaymentV2ClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockRouter_SendPaymentV2Client)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockRouter_SendPaymentV2Client) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockRouter_SendPaymentV2ClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockRouter_SendPaymentV2Client)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockRouter_SendPaymentV2Client) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockRouter_SendPaymentV2ClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockRouter_SendPaymentV2Client)(nil).Trailer))
}

// MockRouter_TrackPaymentV2Client is a mock of Router_TrackPaymentV2Client interface.
type MockRouter_TrackPaymentV2Client struct {
	ctrl     *gomock.Controller
	recorder *MockRouter_TrackPaymentV2ClientMockRecorder
}

// MockRouter_TrackPaymentV2ClientMockRecorder is the mock recorder for MockRouter_TrackPaymentV2Client.
type MockRouter_TrackPaymentV2ClientMockRecorder struct {
	mock *MockRouter_TrackPaymentV2Client
}

// NewMockRouter_TrackPaymentV2Client creates a new mock instance.
func NewMockRouter_TrackPaymentV2Client(ctrl *gomock.Controller) *MockRouter_TrackPaymentV2Client {
	mock := &MockRouter_TrackPaymentV2Client{ctrl: ctrl}
	mock.recorder = &MockRouter_TrackPaymentV2ClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouter_TrackPaymentV2Client) EXPECT() *MockRouter_TrackPaymentV2ClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockRouter_TrackPaymentV2Client) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockRouter_TrackPaymentV2ClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockRouter_TrackPaymentV2Client)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockRouter_TrackPaymentV2Client) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockRouter_TrackPaymentV2ClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockRouter_TrackPaymentV2Client)(nil).Context))
}

// Header mocks base method.
func (m *MockRouter_TrackPaymentV2Client) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockRouter_TrackPaymentV2ClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockRouter_TrackPaymentV2Client)(nil).Header))
}

// Recv mocks base method.
func (m *MockRouter_TrackPaymentV2Client) Recv() (*lnrpc.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*lnrpc.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockRouter_TrackPaymentV2ClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockRouter_TrackPaymentV2Client)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockRouter_TrackPaymentV2Client) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockRouter_TrackPaymentV2ClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockRouter_TrackPaymentV2Client)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockRouter_TrackPaymentV2Client) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockRouter_TrackPaymentV2ClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockRouter_TrackPaymentV2Client)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockRouter_TrackPaymentV2Client) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockRouter_TrackPaymentV2ClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockRouter_TrackPaymentV2Client)(nil).Trailer))
}

// MockRouter_SubscribeHtlcEventsClient is a mock of Router_SubscribeHtlcEventsClient interface.
type MockRouter_SubscribeHtlcEventsClient struct {
	ctrl     *gomock.Controller
	recorder *MockRouter_SubscribeHtlcEventsClientMockRecorder
}

// MockRouter_SubscribeHtlcEventsClientMockRecorder is the mock recorder for MockRouter_SubscribeHtlcEventsClient.
type MockRouter_SubscribeHtlcEventsClientMockRecorder struct {
	mock *MockRouter_SubscribeHtlcEventsClient
}

// NewMockRouter_SubscribeHtlcEventsClient creates a new mock instance.
func NewMockRouter_SubscribeHtlcEventsClient(ctrl *gomock.Controller) *MockRouter_SubscribeHtlcEventsClient {
	mock := &MockRouter_SubscribeHtlcEventsClient{ctrl: ctrl}
	mock.recorder = &MockRouter_SubscribeHtlcEventsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouter_SubscribeHtlcEventsClient) EXPECT() *MockRouter_SubscribeHtlcEventsClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockRouter_SubscribeHtlcEventsClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockRouter_SubscribeHtlcEventsClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockRouter_SubscribeHtlcEventsClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockRouter_SubscribeHtlcEventsClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockRouter_SubscribeHtlcEventsClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockRouter_SubscribeHtlcEventsClient)(nil).Context))
}

// Header mocks base method.
func (m *MockRouter_SubscribeHtlcEventsClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockRouter_SubscribeHtlcEventsClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockRouter_SubscribeHtlcEventsClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockRouter_SubscribeHtlcEventsClient) Recv() (*routerrpc.HtlcEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*routerrpc.HtlcEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockRouter_SubscribeHtlcEventsClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockRouter_SubscribeHtlcEventsClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockRouter_SubscribeHtlcEventsClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockRouter_SubscribeHtlcEventsClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockRouter_SubscribeHtlcEventsClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockRouter_SubscribeHtlcEventsClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockRouter_SubscribeHtlcEventsClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockRouter_SubscribeHtlcEventsClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockRouter_SubscribeHtlcEventsClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockRouter_SubscribeHtlcEventsClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockRouter_SubscribeHtlcEventsClient)(nil).Trailer))
}

// MockRouter_SendPaymentClient is a mock of Router_SendPaymentClient interface.
type MockRouter_SendPaymentClient struct {
	ctrl     *gomock.Controller
	recorder *MockRouter_SendPaymentClientMockRecorder
}

// MockRouter_SendPaymentClientMockRecorder is the mock recorder for MockRouter_SendPaymentClient.
type MockRouter_SendPaymentClientMockRecorder struct {
	mock *MockRouter_SendPaymentClient
}

// NewMockRouter_SendPaymentClient creates a new mock instance.
func NewMockRouter_SendPaymentClient(ctrl *gomock.Controller) *MockRouter_SendPaymentClient {
	mock := &MockRouter_SendPaymentClient{ctrl: ctrl}
	mock.recorder = &MockRouter_SendPaymentClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouter_SendPaymentClient) EXPECT() *MockRouter_SendPaymentClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockRouter_SendPaymentClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockRouter_SendPaymentClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockRouter_SendPaymentClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockRouter_SendPaymentClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockRouter_SendPaymentClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockRouter_SendPaymentClient)(nil).Context))
}

// Header mocks base method.
func (m *MockRouter_SendPaymentClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockRouter_SendPaymentClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockRouter_SendPaymentClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockRouter_SendPaymentClient) Recv() (*routerrpc.PaymentStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*routerrpc.PaymentStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockRouter_SendPaymentClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockRouter_SendPaymentClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockRouter_SendPaymentClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockRouter_SendPaymentClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockRouter_SendPaymentClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockRouter_SendPaymentClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockRouter_SendPaymentClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockRouter_SendPaymentClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockRouter_SendPaymentClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockRouter_SendPaymentClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockRouter_SendPaymentClient)(nil).Trailer))
}

// MockRouter_TrackPaymentClient is a mock of Router_TrackPaymentClient interface.
type MockRouter_TrackPaymentClient struct {
	ctrl     *gomock.Controller
	recorder *MockRouter_TrackPaymentClientMockRecorder
}

// MockRouter_TrackPaymentClientMockRecorder is the mock recorder for MockRouter_TrackPaymentClient.
type MockRouter_TrackPaymentClientMockRecorder struct {
	mock *MockRouter_TrackPaymentClient
}

// NewMockRouter_TrackPaymentClient creates a new mock instance.
func NewMockRouter_TrackPaymentClient(ctrl *gomock.Controller) *MockRouter_TrackPaymentClient {
	mock := &MockRouter_TrackPaymentClient{ctrl: ctrl}
	mock.recorder = &MockRouter_TrackPaymentClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouter_TrackPaymentClient) EXPECT() *MockRouter_TrackPaymentClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockRouter_TrackPaymentClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockRouter_TrackPaymentClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockRouter_TrackPaymentClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockRouter_TrackPaymentClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockRouter_TrackPaymentClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockRouter_TrackPaymentClient)(nil).Context))
}

// Header mocks base method.
func (m *MockRouter_TrackPaymentClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockRouter_TrackPaymentClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockRouter_TrackPaymentClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockRouter_TrackPaymentClient) Recv() (*routerrpc.PaymentStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*routerrpc.PaymentStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockRouter_TrackPaymentClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockRouter_TrackPaymentClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockRouter_TrackPaymentClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockRouter_TrackPaymentClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockRouter_TrackPaymentClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockRouter_TrackPaymentClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockRouter_TrackPaymentClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockRouter_TrackPaymentClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockRouter_TrackPaymentClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockRouter_TrackPaymentClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockRouter_TrackPaymentClient)(nil).Trailer))
}

// MockRouter_HtlcInterceptorClient is a mock of Router_HtlcInterceptorClient interface.
type MockRouter_HtlcInterceptorClient struct {
	ctrl     *gomock.Controller
	recorder *MockRouter_HtlcInterceptorClientMockRecorder
}

// MockRouter_HtlcInterceptorClientMockRecorder is the mock recorder for MockRouter_HtlcInterceptorClient.
type MockRouter_HtlcInterceptorClientMockRecorder struct {
	mock *MockRouter_HtlcInterceptorClient
}

// NewMockRouter_HtlcInterceptorClient creates a new mock instance.
func NewMockRouter_HtlcInterceptorClient(ctrl *gomock.Controller) *MockRouter_HtlcInterceptorClient {
	mock := &MockRouter_HtlcInterceptorClient{ctrl: ctrl}
	mock.recorder = &MockRouter_HtlcInterceptorClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouter_HtlcInterceptorClient) EXPECT() *MockRouter_HtlcInterceptorClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockRouter_HtlcInterceptorClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockRouter_HtlcInterceptorClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockRouter_HtlcInterceptorClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockRouter_HtlcInterceptorClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockRouter_HtlcInterceptorClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockRouter_HtlcInterceptorClient)(nil).Context))
}

// Header mocks base method.
func (m *MockRouter_HtlcInterceptorClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockRouter_HtlcInterceptorClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockRouter_HtlcInterceptorClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockRouter_HtlcInterceptorClient) Recv() (*routerrpc.ForwardHtlcInterceptRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*routerrpc.ForwardHtlcInterceptRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockRouter_HtlcInterceptorClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockRouter_HtlcInterceptorClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockRouter_HtlcInterceptorClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockRouter_HtlcInterceptorClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockRouter_HtlcInterceptorClient)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockRouter_HtlcInterceptorClient) Send(arg0 *routerrpc.ForwardHtlcInterceptResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockRouter_HtlcInterceptorClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockRouter_HtlcInterceptorClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockRouter_HtlcInterceptorClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockRouter_HtlcInterceptorClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockRouter_HtlcInterceptorClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockRouter_HtlcInterceptorClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockRouter_HtlcInterceptorClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockRouter_HtlcInterceptorClient)(nil).Trailer))
}

// MockRouterServer is a mock of RouterServer interface.
type MockRouterServer struct {
	ctrl     *gomock.Controller
	recorder *MockRouterServerMockRecorder
}

// MockRouterServerMockRecorder is the mock recorder for MockRouterServer.
type MockRouterServerMockRecorder struct {
	mock *MockRouterServer
}

// NewMockRouterServer creates a new mock instance.
func NewMockRouterServer(ctrl *gomock.Controller) *MockRouterServer {
	mock := &MockRouterServer{ctrl: ctrl}
	mock.recorder = &MockRouterServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouterServer) EXPECT() *MockRouterServerMockRecorder {
	return m.recorder
}

// BuildRoute mocks base method.
func (m *MockRouterServer) BuildRoute(arg0 context.Context, arg1 *routerrpc.BuildRouteRequest) (*routerrpc.BuildRouteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildRoute", arg0, arg1)
	ret0, _ := ret[0].(*routerrpc.BuildRouteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildRoute indicates an expected call of BuildRoute.
func (mr *MockRouterServerMockRecorder) BuildRoute(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildRoute", reflect.TypeOf((*MockRouterServer)(nil).BuildRoute), arg0, arg1)
}

// EstimateRouteFee mocks base method.
func (m *MockRouterServer) EstimateRouteFee(arg0 context.Context, arg1 *routerrpc.RouteFeeRequest) (*routerrpc.RouteFeeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstimateRouteFee", arg0, arg1)
	ret0, _ := ret[0].(*routerrpc.RouteFeeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EstimateRouteFee indicates an expected call of EstimateRouteFee.
func (mr *MockRouterServerMockRecorder) EstimateRouteFee(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimateRouteFee", reflect.TypeOf((*MockRouterServer)(nil).EstimateRouteFee), arg0, arg1)
}

// GetMissionControlConfig mocks base method.
func (m *MockRouterServer) GetMissionControlConfig(arg0 context.Context, arg1 *routerrpc.GetMissionControlConfigRequest) (*routerrpc.GetMissionControlConfigResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMissionControlConfig", arg0, arg1)
	ret0, _ := ret[0].(*routerrpc.GetMissionControlConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMissionControlConfig indicates an expected call of GetMissionControlConfig.
func (mr *MockRouterServerMockRecorder) GetMissionControlConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMissionControlConfig", reflect.TypeOf((*MockRouterServer)(nil).GetMissionControlConfig), arg0, arg1)
}

// HtlcInterceptor mocks base method.
func (m *MockRouterServer) HtlcInterceptor(arg0 routerrpc.Router_HtlcInterceptorServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HtlcInterceptor", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// HtlcInterceptor indicates an expected call of HtlcInterceptor.
func (mr *MockRouterServerMockRecorder) HtlcInterceptor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HtlcInterceptor", reflect.TypeOf((*MockRouterServer)(nil).HtlcInterceptor), arg0)
}

// QueryMissionControl mocks base method.
func (m *MockRouterServer) QueryMissionControl(arg0 context.Context, arg1 *routerrpc.QueryMissionControlRequest) (*routerrpc.QueryMissionControlResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryMissionControl", arg0, arg1)
	ret0, _ := ret[0].(*routerrpc.QueryMissionControlResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryMissionControl indicates an expected call of QueryMissionControl.
func (mr *MockRouterServerMockRecorder) QueryMissionControl(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryMissionControl", reflect.TypeOf((*MockRouterServer)(nil).QueryMissionControl), arg0, arg1)
}

// QueryProbability mocks base method.
func (m *MockRouterServer) QueryProbability(arg0 context.Context, arg1 *routerrpc.QueryProbabilityRequest) (*routerrpc.QueryProbabilityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryProbability", arg0, arg1)
	ret0, _ := ret[0].(*routerrpc.QueryProbabilityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryProbability indicates an expected call of QueryProbability.
func (mr *MockRouterServerMockRecorder) QueryProbability(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryProbability", reflect.TypeOf((*MockRouterServer)(nil).QueryProbability), arg0, arg1)
}

// ResetMissionControl mocks base method.
func (m *MockRouterServer) ResetMissionControl(arg0 context.Context, arg1 *routerrpc.ResetMissionControlRequest) (*routerrpc.ResetMissionControlResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetMissionControl", arg0, arg1)
	ret0, _ := ret[0].(*routerrpc.ResetMissionControlResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetMissionControl indicates an expected call of ResetMissionControl.
func (mr *MockRouterServerMockRecorder) ResetMissionControl(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetMissionControl", reflect.TypeOf((*MockRouterServer)(nil).ResetMissionControl), arg0, arg1)
}

// SendPayment mocks base method.
func (m *MockRouterServer) SendPayment(arg0 *routerrpc.SendPaymentRequest, arg1 routerrpc.Router_SendPaymentServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendPayment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendPayment indicates an expected call of SendPayment.
func (mr *MockRouterServerMockRecorder) SendPayment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPayment", reflect.TypeOf((*MockRouterServer)(nil).SendPayment), arg0, arg1)
}

// SendPaymentV2 mocks base method.
func (m *MockRouterServer) SendPaymentV2(arg0 *routerrpc.SendPaymentRequest, arg1 routerrpc.Router_SendPaymentV2Server) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendPaymentV2", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendPaymentV2 indicates an expected call of SendPaymentV2.
func (mr *MockRouterServerMockRecorder) SendPaymentV2(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPaymentV2", reflect.TypeOf((*MockRouterServer)(nil).SendPaymentV2), arg0, arg1)
}

// SendToRoute mocks base method.
func (m *MockRouterServer) SendToRoute(arg0 context.Context, arg1 *routerrpc.SendToRouteRequest) (*routerrpc.SendToRouteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendToRoute", arg0, arg1)
	ret0, _ := ret[0].(*routerrpc.SendToRouteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendToRoute indicates an expected call of SendToRoute.
func (mr *MockRouterServerMockRecorder) SendToRoute(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendToRoute", reflect.TypeOf((*MockRouterServer)(nil).SendToRoute), arg0, arg1)
}

// SendToRouteV2 mocks base method.
func (m *MockRouterServer) SendToRouteV2(arg0 context.Context, arg1 *routerrpc.SendToRouteRequest) (*lnrpc.HTLCAttempt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendToRouteV2", arg0, arg1)
	ret0, _ := ret[0].(*lnrpc.HTLCAttempt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendToRouteV2 indicates an expected call of SendToRouteV2.
func (mr *MockRouterServerMockRecorder) SendToRouteV2(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendToRouteV2", reflect.TypeOf((*MockRouterServer)(nil).SendToRouteV2), arg0, arg1)
}

// SetMissionControlConfig mocks base method.
func (m *MockRouterServer) SetMissionControlConfig(arg0 context.Context, arg1 *routerrpc.SetMissionControlConfigRequest) (*routerrpc.SetMissionControlConfigResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMissionControlConfig", arg0, arg1)
	ret0, _ := ret[0].(*routerrpc.SetMissionControlConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetMissionControlConfig indicates an expected call of SetMissionControlConfig.
func (mr *MockRouterServerMockRecorder) SetMissionControlConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMissionControlConfig", reflect.TypeOf((*MockRouterServer)(nil).SetMissionControlConfig), arg0, arg1)
}

// SubscribeHtlcEvents mocks base method.
func (m *MockRouterServer) SubscribeHtlcEvents(arg0 *routerrpc.SubscribeHtlcEventsRequest, arg1 routerrpc.Router_SubscribeHtlcEventsServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeHtlcEvents", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubscribeHtlcEvents indicates an expected call of SubscribeHtlcEvents.
func (mr *MockRouterServerMockRecorder) SubscribeHtlcEvents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeHtlcEvents", reflect.TypeOf((*MockRouterServer)(nil).SubscribeHtlcEvents), arg0, arg1)
}

// TrackPayment mocks base method.
func (m *MockRouterServer) TrackPayment(arg0 *routerrpc.TrackPaymentRequest, arg1 routerrpc.Router_TrackPaymentServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrackPayment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// TrackPayment indicates an expected call of TrackPayment.
func (mr *MockRouterServerMockRecorder) TrackPayment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrackPayment", reflect.TypeOf((*MockRouterServer)(nil).TrackPayment), arg0, arg1)
}

// TrackPaymentV2 mocks base method.
func (m *MockRouterServer) TrackPaymentV2(arg0 *routerrpc.TrackPaymentRequest, arg1 routerrpc.Router_TrackPaymentV2Server) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrackPaymentV2", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// TrackPaymentV2 indicates an expected call of TrackPaymentV2.
func (mr *MockRouterServerMockRecorder) TrackPaymentV2(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrackPaymentV2", reflect.TypeOf((*MockRouterServer)(nil).TrackPaymentV2), arg0, arg1)
}

// UpdateChanStatus mocks base method.
func (m *MockRouterServer) UpdateChanStatus(arg0 context.Context, arg1 *routerrpc.UpdateChanStatusRequest) (*routerrpc.UpdateChanStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChanStatus", arg0, arg1)
	ret0, _ := ret[0].(*routerrpc.UpdateChanStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateChanStatus indicates an expected call of UpdateChanStatus.
func (mr *MockRouterServerMockRecorder) UpdateChanStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChanStatus", reflect.TypeOf((*MockRouterServer)(nil).UpdateChanStatus), arg0, arg1)
}

// XImportMissionControl mocks base method.
func (m *MockRouterServer) XImportMissionControl(arg0 context.Context, arg1 *routerrpc.XImportMissionControlRequest) (*routerrpc.XImportMissionControlResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XImportMissionControl", arg0, arg1)
	ret0, _ := ret[0].(*routerrpc.XImportMissionControlResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// XImportMissionControl indicates an expected call of XImportMissionControl.
func (mr *MockRouterServerMockRecorder) XImportMissionControl(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XImportMissionControl", reflect.TypeOf((*MockRouterServer)(nil).XImportMissionControl), arg0, arg1)
}

// mustEmbedUnimplementedRouterServer mocks base method.
func (m *MockRouterServer) mustEmbedUnimplementedRouterServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedRouterServer")
}

// mustEmbedUnimplementedRouterServer indicates an expected call of mustEmbedUnimplementedRouterServer.
func (mr *MockRouterServerMockRecorder) mustEmbedUnimplementedRouterServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedRouterServer", reflect.TypeOf((*MockRouterServer)(nil).mustEmbedUnimplementedRouterServer))
}

// MockUnsafeRouterServer is a mock of UnsafeRouterServer interface.
type MockUnsafeRouterServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeRouterServerMockRecorder
}

// MockUnsafeRouterServerMockRecorder is the mock recorder for MockUnsafeRouterServer.
type MockUnsafeRouterServerMockRecorder struct {
	mock *MockUnsafeRouterServer
}

// NewMockUnsafeRouterServer creates a new mock instance.
func NewMockUnsafeRouterServer(ctrl *gomock.Controller) *MockUnsafeRouterServer {
	mock := &MockUnsafeRouterServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeRouterServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeRouterServer) EXPECT() *MockUnsafeRouterServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedRouterServer mocks base method.
func (m *MockUnsafeRouterServer) mustEmbedUnimplementedRouterServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedRouterServer")
}

// mustEmbedUnimplementedRouterServer indicates an expected call of mustEmbedUnimplementedRouterServer.
func (mr *MockUnsafeRouterServerMockRecorder) mustEmbedUnimplementedRouterServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedRouterServer", reflect.TypeOf((*MockUnsafeRouterServer)(nil).mustEmbedUnimplementedRouterServer))
}

// MockRouter_SendPaymentV2Server is a mock of Router_SendPaymentV2Server interface.
type MockRouter_SendPaymentV2Server struct {
	ctrl     *gomock.Controller
	recorder *MockRouter_SendPaymentV2ServerMockRecorder
}

// MockRouter_SendPaymentV2ServerMockRecorder is the mock recorder for MockRouter_SendPaymentV2Server.
type MockRouter_SendPaymentV2ServerMockRecorder struct {
	mock *MockRouter_SendPaymentV2Server
}

// NewMockRouter_SendPaymentV2Server creates a new mock instance.
func NewMockRouter_SendPaymentV2Server(ctrl *gomock.Controller) *MockRouter_SendPaymentV2Server {
	mock := &MockRouter_SendPaymentV2Server{ctrl: ctrl}
	mock.recorder = &MockRouter_SendPaymentV2ServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouter_SendPaymentV2Server) EXPECT() *MockRouter_SendPaymentV2ServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockRouter_SendPaymentV2Server) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockRouter_SendPaymentV2ServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockRouter_SendPaymentV2Server)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockRouter_SendPaymentV2Server) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockRouter_SendPaymentV2ServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockRouter_SendPaymentV2Server)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockRouter_SendPaymentV2Server) Send(arg0 *lnrpc.Payment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockRouter_SendPaymentV2ServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockRouter_SendPaymentV2Server)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockRouter_SendPaymentV2Server) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockRouter_SendPaymentV2ServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockRouter_SendPaymentV2Server)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockRouter_SendPaymentV2Server) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockRouter_SendPaymentV2ServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockRouter_SendPaymentV2Server)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockRouter_SendPaymentV2Server) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockRouter_SendPaymentV2ServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockRouter_SendPaymentV2Server)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockRouter_SendPaymentV2Server) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockRouter_SendPaymentV2ServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockRouter_SendPaymentV2Server)(nil).SetTrailer), arg0)
}

// MockRouter_TrackPaymentV2Server is a mock of Router_TrackPaymentV2Server interface.
type MockRouter_TrackPaymentV2Server struct {
	ctrl     *gomock.Controller
	recorder *MockRouter_TrackPaymentV2ServerMockRecorder
}

// MockRouter_TrackPaymentV2ServerMockRecorder is the mock recorder for MockRouter_TrackPaymentV2Server.
type MockRouter_TrackPaymentV2ServerMockRecorder struct {
	mock *MockRouter_TrackPaymentV2Server
}

// NewMockRouter_TrackPaymentV2Server creates a new mock instance.
func NewMockRouter_TrackPaymentV2Server(ctrl *gomock.Controller) *MockRouter_TrackPaymentV2Server {
	mock := &MockRouter_TrackPaymentV2Server{ctrl: ctrl}
	mock.recorder = &MockRouter_TrackPaymentV2ServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouter_TrackPaymentV2Server) EXPECT() *MockRouter_TrackPaymentV2ServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockRouter_TrackPaymentV2Server) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockRouter_TrackPaymentV2ServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockRouter_TrackPaymentV2Server)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockRouter_TrackPaymentV2Server) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockRouter_TrackPaymentV2ServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockRouter_TrackPaymentV2Server)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockRouter_TrackPaymentV2Server) Send(arg0 *lnrpc.Payment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockRouter_TrackPaymentV2ServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockRouter_TrackPaymentV2Server)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockRouter_TrackPaymentV2Server) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockRouter_TrackPaymentV2ServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockRouter_TrackPaymentV2Server)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockRouter_TrackPaymentV2Server) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockRouter_TrackPaymentV2ServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockRouter_TrackPaymentV2Server)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockRouter_TrackPaymentV2Server) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockRouter_TrackPaymentV2ServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockRouter_TrackPaymentV2Server)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockRouter_TrackPaymentV2Server) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockRouter_TrackPaymentV2ServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockRouter_TrackPaymentV2Server)(nil).SetTrailer), arg0)
}

// MockRouter_SubscribeHtlcEventsServer is a mock of Router_SubscribeHtlcEventsServer interface.
type MockRouter_SubscribeHtlcEventsServer struct {
	ctrl     *gomock.Controller
	recorder *MockRouter_SubscribeHtlcEventsServerMockRecorder
}

// MockRouter_SubscribeHtlcEventsServerMockRecorder is the mock recorder for MockRouter_SubscribeHtlcEventsServer.
type MockRouter_SubscribeHtlcEventsServerMockRecorder struct {
	mock *MockRouter_SubscribeHtlcEventsServer
}

// NewMockRouter_SubscribeHtlcEventsServer creates a new mock instance.
func NewMockRouter_SubscribeHtlcEventsServer(ctrl *gomock.Controller) *MockRouter_SubscribeHtlcEventsServer {
	mock := &MockRouter_SubscribeHtlcEventsServer{ctrl: ctrl}
	mock.recorder = &MockRouter_SubscribeHtlcEventsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouter_SubscribeHtlcEventsServer) EXPECT() *MockRouter_SubscribeHtlcEventsServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockRouter_SubscribeHtlcEventsServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockRouter_SubscribeHtlcEventsServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockRouter_SubscribeHtlcEventsServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockRouter_SubscribeHtlcEventsServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockRouter_SubscribeHtlcEventsServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockRouter_SubscribeHtlcEventsServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockRouter_SubscribeHtlcEventsServer) Send(arg0 *routerrpc.HtlcEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockRouter_SubscribeHtlcEventsServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockRouter_SubscribeHtlcEventsServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockRouter_SubscribeHtlcEventsServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockRouter_SubscribeHtlcEventsServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockRouter_SubscribeHtlcEventsServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockRouter_SubscribeHtlcEventsServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockRouter_SubscribeHtlcEventsServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockRouter_SubscribeHtlcEventsServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockRouter_SubscribeHtlcEventsServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockRouter_SubscribeHtlcEventsServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockRouter_SubscribeHtlcEventsServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockRouter_SubscribeHtlcEventsServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockRouter_SubscribeHtlcEventsServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockRouter_SubscribeHtlcEventsServer)(nil).SetTrailer), arg0)
}

// MockRouter_SendPaymentServer is a mock of Router_SendPaymentServer interface.
type MockRouter_SendPaymentServer struct {
	ctrl     *gomock.Controller
	recorder *MockRouter_SendPaymentServerMockRecorder
}

// MockRouter_SendPaymentServerMockRecorder is the mock recorder for MockRouter_SendPaymentServer.
type MockRouter_SendPaymentServerMockRecorder struct {
	mock *MockRouter_SendPaymentServer
}

// NewMockRouter_SendPaymentServer creates a new mock instance.
func NewMockRouter_SendPaymentServer(ctrl *gomock.Controller) *MockRouter_SendPaymentServer {
	mock := &MockRouter_SendPaymentServer{ctrl: ctrl}
	mock.recorder = &MockRouter_SendPaymentServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouter_SendPaymentServer) EXPECT() *MockRouter_SendPaymentServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockRouter_SendPaymentServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockRouter_SendPaymentServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockRouter_SendPaymentServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockRouter_SendPaymentServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockRouter_SendPaymentServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockRouter_SendPaymentServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockRouter_SendPaymentServer) Send(arg0 *routerrpc.PaymentStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockRouter_SendPaymentServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockRouter_SendPaymentServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockRouter_SendPaymentServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockRouter_SendPaymentServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockRouter_SendPaymentServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockRouter_SendPaymentServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockRouter_SendPaymentServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockRouter_SendPaymentServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockRouter_SendPaymentServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockRouter_SendPaymentServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockRouter_SendPaymentServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockRouter_SendPaymentServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockRouter_SendPaymentServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockRouter_SendPaymentServer)(nil).SetTrailer), arg0)
}

// MockRouter_TrackPaymentServer is a mock of Router_TrackPaymentServer interface.
type MockRouter_TrackPaymentServer struct {
	ctrl     *gomock.Controller
	recorder *MockRouter_TrackPaymentServerMockRecorder
}

// MockRouter_TrackPaymentServerMockRecorder is the mock recorder for MockRouter_TrackPaymentServer.
type MockRouter_TrackPaymentServerMockRecorder struct {
	mock *MockRouter_TrackPaymentServer
}

// NewMockRouter_TrackPaymentServer creates a new mock instance.
func NewMockRouter_TrackPaymentServer(ctrl *gomock.Controller) *MockRouter_TrackPaymentServer {
	mock := &MockRouter_TrackPaymentServer{ctrl: ctrl}
	mock.recorder = &MockRouter_TrackPaymentServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouter_TrackPaymentServer) EXPECT() *MockRouter_TrackPaymentServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockRouter_TrackPaymentServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockRouter_TrackPaymentServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockRouter_TrackPaymentServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockRouter_TrackPaymentServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockRouter_TrackPaymentServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockRouter_TrackPaymentServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockRouter_TrackPaymentServer) Send(arg0 *routerrpc.PaymentStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockRouter_TrackPaymentServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockRouter_TrackPaymentServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockRouter_TrackPaymentServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockRouter_TrackPaymentServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockRouter_TrackPaymentServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockRouter_TrackPaymentServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockRouter_TrackPaymentServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockRouter_TrackPaymentServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockRouter_TrackPaymentServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockRouter_TrackPaymentServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockRouter_TrackPaymentServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockRouter_TrackPaymentServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockRouter_TrackPaymentServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockRouter_TrackPaymentServer)(nil).SetTrailer), arg0)
}

// MockRouter_HtlcInterceptorServer is a mock of Router_HtlcInterceptorServer interface.
type MockRouter_HtlcInterceptorServer struct {
	ctrl     *gomock.Controller
	recorder *MockRouter_HtlcInterceptorServerMockRecorder
}

// MockRouter_HtlcInterceptorServerMockRecorder is the mock recorder for MockRouter_HtlcInterceptorServer.
type MockRouter_HtlcInterceptorServerMockRecorder struct {
	mock *MockRouter_HtlcInterceptorServer
}

// NewMockRouter_HtlcInterceptorServer creates a new mock instance.
func NewMockRouter_HtlcInterceptorServer(ctrl *gomock.Controller) *MockRouter_HtlcInterceptorServer {
	mock := &MockRouter_HtlcInterceptorServer{ctrl: ctrl}
	mock.recorder = &MockRouter_HtlcInterceptorServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouter_HtlcInterceptorServer) EXPECT() *MockRouter_HtlcInterceptorServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockRouter_HtlcInterceptorServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockRouter_HtlcInterceptorServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockRouter_HtlcInterceptorServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockRouter_HtlcInterceptorServer) Recv() (*routerrpc.ForwardHtlcInterceptResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*routerrpc.ForwardHtlcInterceptResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockRouter_HtlcInterceptorServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockRouter_HtlcInterceptorServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockRouter_HtlcInterceptorServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockRouter_HtlcInterceptorServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockRouter_HtlcInterceptorServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockRouter_HtlcInterceptorServer) Send(arg0 *routerrpc.ForwardHtlcInterceptRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockRouter_HtlcInterceptorServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockRouter_HtlcInterceptorServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockRouter_HtlcInterceptorServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockRouter_HtlcInterceptorServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockRouter_HtlcInterceptorServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockRouter_HtlcInterceptorServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockRouter_HtlcInterceptorServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockRouter_HtlcInterceptorServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockRouter_HtlcInterceptorServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockRouter_HtlcInterceptorServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockRouter_HtlcInterceptorServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockRouter_HtlcInterceptorServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockRouter_HtlcInterceptorServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockRouter_HtlcInterceptorServer)(nil).SetTrailer), arg0)
}
